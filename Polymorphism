public class Product {
    private String id;
    private int price;
    private String name;

    public Product(String id, int price, String name) {
        this.id = id;
        this.price = price;
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public int calculateTotal() {
        return price;
    }
}

public class ProductStamp extends Product {
    private int stamp;

    public ProductStamp(String id, int price, String name, int stamp) {
        super(id, price, name);
        this.stamp = stamp;
    }

    public int getStamp() {
        return stamp;
    }
    
    @Override
    public int calculateTotal() {
        return super.calculateTotal() - (stamp * 2); // Assuming stamp value is 2 each
    }
}

import java.util.ArrayList;

public class DB {
    private ArrayList<Product> products;
    private int totalAmount = 0;
    private int totalStamps = 0;

    public DB() {
        this.products = new ArrayList<>();
        this.totalAmount = totalAmount;
        this.totalStamps = totalStamps;
    }

    public void addProduct(Product product) {
        products.add(product);
    }
    
    public void pay(Product product, int additionalStamps) {
        int total = product.calculateTotal();
        int stampsFromProduct = 0;

        // เช็คว่าสินค้านี้เป็น ProductStamp หรือไม่
        if (product instanceof ProductStamp) {
            stampsFromProduct = ((ProductStamp) product).getStamp();
        }

        // เงื่อนไขสำหรับแสตมป์จากการซื้อสินค้าตามเงื่อนไข
        if (product.getId().equals("111")) {
            stampsFromProduct += Math.max(5, additionalStamps);
        } else if (product.getId().equals("999")) {
            stampsFromProduct += Math.max(10, additionalStamps);
        } else if (product.getId().equals("555")) {
            stampsFromProduct += Math.max(12, additionalStamps);
        } else {
            // ถ้าไม่ใช่สินค้าที่มีเงื่อนไข 50 บาท ให้คำนวณแสตมป์จากครบทุก 50 บาท
            int additionalStampsFromTotal = total / 50;
            stampsFromProduct += additionalStampsFromTotal;
        }

        totalAmount += total;
        totalStamps += stampsFromProduct;
    
        System.out.println("รหัส " + product.getId() + "    :   ราคา " + total
        + " แสตมป์ " + stampsFromProduct + " ดวง");
        
    }

    public void printTotal() {
        System.out.println("จะได้ ราคา " + totalAmount + " แสตมป์ " + totalStamps + " ดวง");
    }

    public Product getProductById(String productId) {
        for (Product product : products) {
            if (product.getId().equals(productId)) {
                return product;
            }
        }
        return null; // หากไม่พบสินค้าที่มี ID ตรงกับที่ระบุ
    }
}

import java.util.Scanner;

public class Demo{
    public static void initDB(DB db) {
        db.addProduct(new Product("111", 100, "Product A"));
        db.addProduct(new Product("123", 150, "Product B"));
        db.addProduct(new ProductStamp("11", 300, "ProductStamp A", 3));
        db.addProduct(new ProductStamp("111", 30, "ProductStamp B", 4));
        db.addProduct(new Product("555", 50, "Product C"));
        db.addProduct(new Product("999", 12, "Product D"));
    }
    
    public static void main(String[] args) {
        DB newDB = new DB();
        initDB(newDB);
        
        Scanner scanner = new Scanner(System.in);
        boolean continueShopping = true;

        while (continueShopping) {
            System.out.print("รหัส ");
            String productCode = scanner.nextLine();
            
            System.out.print("  :   ราคา ");
            int productPrice = scanner.nextInt();
            scanner.nextLine(); // อ่านค่า new line จากการป้อนราคา

            // ส่งค่า 0 เพื่อบอกว่าไม่มีรายการซื้อเพิ่มเติม
            newDB.pay(newDB.getProductById(productCode), 0);

            System.out.print("ต้องการทำรายการเพิ่มเติมหรือไม่? (y/n): ");
            String choice = scanner.nextLine();

            continueShopping = choice.equalsIgnoreCase("y");
        }
        
        // แสดงผลรวมทั้งหมด
        newDB.printTotal();
    }
}




Lab 6 Polymorphism
วัตถุประสงค์
1. เพื่อศึกษากระบวนการมีหลายรูป(Polymorphism) Polymorphism) และการทำา dynamic binding
 ตอนที่ 1
1. กำาหนดร้านค้ามีคลาส product ประกอบด้วย id , price , name
2. ให้นักศึกษานำาคลาส Product และสร้างคลาสลูก class productStamp ที่มี attribute stamp มี
constructor รับ ค่า productname,cost,stamp
3. จาก lab 6 นำาคลาส product, DB มาใช้ใหม่
นำาข้อมูล ของ class product และ productStamp ใน list ซึ่ง implement ไว้ในคลาส DB เป็นการ
เรียนรู้เรื่อง polymorphism คิดค่า stamp 7-11
4. สร้าง method ใน main method นี้สามารถคำานวนค่าของเงินที่ต้องจ่าย ที่คลาส product และ
productStamp เพื่อแสดงผล ราคารวม จำานวนแสตมป์ที่ได้รับ เงื่อนไขการได้รับแสตมป์ ซึ่งเมื่อ มีการ
ดึงข้อมูลขึ้นมา จาก DB สามารถ เรียก method pay เพื่อคำานวนค่า สินค้า และ แสตมป์ได้
กำาหนดให้
- เมื่อซื้อสินค้า รหัส 111 จะได้รับ 5 ดวง, 999 จะได้รับแสตมป์ 10 ดวง,555 จะได้รับ 12 ดวง
- เมื่อซื้อสินค้าครบทุกๆ 50 บาทจะได้รับ 1 ดวง โดยไม่นำาสินค้าที่ได้รับแสตมป์ไปแล้วมาคำานวณ
ตัวอย่าง Input ตอนซื้อ : เรียกค่าจาก DB ได้ราคา
 รหัส 111 : ราคา 100
 รหัส 123 : ราคา 150
 Output : จะได้ ราคา 250 แสตมป์ 8 ดวง
ตัวอย่างหากไม่อยากกำาหนดค่าบ่อยให้เขียนเป็น ค่าเริ่มต้นได้ดังนี้ ในคลาส main
static void initDB(Polymorphism) ){
 product s = new product(Polymorphism) );
 s.setId(Polymorphism) "12");
 s.setPrice(Polymorphism) 40);
 // s.setStamp(Polymorphism) 0);
 newDB.addproduct(Polymorphism) s);
 product s1 = new product(Polymorphism) );
 s1.setId(Polymorphism) "14");
 s1.setPrice(Polymorphism) 100);
 // s1.setStamp(Polymorphism) 5);
 newDB.addproduct(Polymorphism) s1);
 newDB.addproduct(Polymorphism) new productStamp(Polymorphism) "11",300,"jj",3));
 newDB.addproduct(Polymorphism) new productStamp(Polymorphism) "111",30,"kk",4));
 newDB.addproduct(Polymorphism) new product(Polymorphism) "555",50,"ww"));
 newDB.addproduct(Polymorphism) new product(Polymorphism) "999",12,"ee"));
 }
ให้นักศึกษาเขียนอธิบายว่าส่วนไหนของโค้ดเป็นการทำ polymorphism และส่วนไหนที่เป็นการทำ dynamic binding

โค้ดที่กำหนดนี้ใช้การทำ Polymorphism และ Dynamic Binding 
ในส่วนของคลาส Product และ ProductStamp ได้อย่างชัดเจน:

1)Polymorphism:

1.1) Product และ ProductStamp เป็นลูกหลายของคลาส Product. 
ทั้งสองคลาสนี้ใช้การโอเวอร์ไรด์ (override) เมธอด calculateTotal() จากคลาสพ่อ (Product).
1.2)เมธอด calculateTotal() ใน ProductStamp ได้ทำการปรับปรุงมีการลบค่าแสตมป์
จากราคาเพื่อคำนวณราคาที่แท้จริงหลังหักแสตมป์ออก.


2)Dynamic Binding:

2.1)ในเมธอด pay() ของคลาส DB, มีการใช้ instanceof เพื่อตรวจสอบว่า product เป็น ProductStamp หรือไม่. 
การใช้ instanceof นี้ทำให้เราสามารถทำการตรวจสอบประเภทของอ็อบเจ็กต์ได้ในระหว่างการรันโปรแกรม (runtime) 
และทำ Dynamic Binding.
if (product instanceof ProductStamp) {
    stampsFromProduct = ((ProductStamp) product).getStamp();
}
2.2)ในส่วนที่เช็คเงื่อนไขสำหรับแสตมป์จากการซื้อสินค้า, ทำให้เราสามารถใช้ Dynamic Binding 
ในการทำการเพิ่มค่าแสตมป์ตามเงื่อนไขที่กำหนดได้อย่างยืดหยุ่น.
// เงื่อนไขสำหรับแสตมป์จากการซื้อสินค้าตามเงื่อนไข
if (product.getId().equals("111")) {
    stampsFromProduct += Math.max(5, additionalStamps);
} else if (product.getId().equals("999")) {
    stampsFromProduct += Math.max(10, additionalStamps);
} else if (product.getId().equals("555")) {
    stampsFromProduct += Math.max(12, additionalStamps);
} else {
    // ถ้าไม่ใช่สินค้าที่มีเงื่อนไข 50 บาท ให้คำนวณแสตมป์จากครบทุก 50 บาท
    int additionalStampsFromTotal = total / 50;
    stampsFromProduct += additionalStampsFromTotal;
}

ทั้งนี้, การใช้ Polymorphism และ Dynamic Binding ช่วยให้โค้ดมีความยืดหยุ่น
และสามารถทำงานกับวัตถุของคลาสที่ถูกสืบทอดได้อย่างสมบูรณ์แบบ.
